Tensor& ConvolutionalLayer::forward(Tensor& input_matrixes) {
	
	inputs_device = input_matrixes;

	cudaBindTexture2D(0, MatrixesRef, inputs_device.data, MatrixesRef.channelDesc, inputs_device.matrixes_size, inputs_device.depth, inputs_device.pitch);
	cudaBindTexture2D(0, FiltersRef, filters_device.data, FiltersRef.channelDesc, filters_device.matrixes_size, filters_device.depth, filters_device.pitch);

	dim3 threadsPerBlock = dim3(DOUBLE_BLOCK_SIZE, DOUBLE_BLOCK_SIZE, 1);
	dim3 blocksPerGrid = dim3(outputs_devices.cols_count / DOUBLE_BLOCK_SIZE + (outputs_devices.cols_count % DOUBLE_BLOCK_SIZE == 0 ? 0 : 1),
		outputs_devices.rows_count / DOUBLE_BLOCK_SIZE + (outputs_devices.rows_count % DOUBLE_BLOCK_SIZE == 0 ? 0 : 1), outputs_devices.depth);

	//test
	printf("Convolution Forward:\n");
	printf("Filters:\n");
	float* filters_host = new float[filters_device.matrixes_size * filters_device.depth];
	cudaMemcpy2D(filters_host, filters_device.matrixes_size * sizeof(float), filters_device.data, filters_device.pitch,
		filters_device.matrixes_size * sizeof(float), filters_device.depth, cudaMemcpyDeviceToHost);
	for (int i = 0; i < filters_device.depth; i++)
	{
		for (int j = 0; j < filters_device.rows_count; j++)
		{
			for (int l = 0; l < filters_device.cols_count; l++)
			{
				printf("%f ", filters_host[i * filters_device.matrixes_size + j * filters_device.cols_count + l]);
			}
			printf("\n");
		}
		printf("\n");
	}
	printf("\n");
	free(filters_host);
	printf("Inputs:\n");
	float* inputs_host = new float[inputs_device.matrixes_size * inputs_device.depth];
	cudaMemcpy2D(inputs_host, inputs_device.matrixes_size * sizeof(float), inputs_device.data, inputs_device.pitch,
		inputs_device.matrixes_size * sizeof(float), inputs_device.depth, cudaMemcpyDeviceToHost);
	for (int i = 0; i < inputs_device.depth; i++)
	{
		for (int j = 0; j < inputs_device.rows_count; j++)
		{
			for (int l = 0; l < inputs_device.cols_count; l++)
			{
				printf("%f ", inputs_host[i * inputs_device.matrixes_size + j * inputs_device.cols_count + l]);
			}
			printf("\n");
		}
		printf("\n");
	}
	printf("\n");
	free(inputs_host);

	cuda_convolve << <blocksPerGrid, threadsPerBlock >> > (outputs_devices.data, biases_device, inputs_device.cols_count, inputs_device.depth, outputs_devices.cols_count, outputs_devices.rows_count, outputs_devices.pitch, filters_device.cols_count);
	cudaDeviceSynchronize();
	cudacall(cudaGetLastError());

	//test
	printf("Outputs:\n");
	float* outputs_host = new float[outputs_devices.matrixes_size * outputs_devices.depth];
	cudaMemcpy2D(outputs_host, outputs_devices.matrixes_size * sizeof(float), outputs_devices.data, outputs_devices.pitch,
		outputs_devices.matrixes_size * sizeof(float), outputs_devices.depth, cudaMemcpyDeviceToHost);
	for (int i = 0; i < outputs_devices.depth; i++)
	{
		for (int j = 0; j < outputs_devices.rows_count; j++)
		{
			for (int l = 0; l < outputs_devices.cols_count; l++)
			{
				printf("%f ", outputs_host[i * outputs_devices.matrixes_size + j * outputs_devices.cols_count + l]);
			}
			printf("\n");
		}
		printf("\n");
	}
	printf("\n");
	free(outputs_host);

	cudaUnbindTexture(MatrixesRef);
	cudaUnbindTexture(FiltersRef);

	return outputs_devices;
}