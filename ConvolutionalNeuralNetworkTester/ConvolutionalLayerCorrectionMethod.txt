__global__ void cuda_correct_filters(float* filters, const int fl_size, size_t fl_pitch, const int gr_cols, const int gr_rows, const int gr_count, const int in_cols, const int in_count)
{
	int x = threadIdx.x;
	int y = threadIdx.y;
	int x_block = blockIdx.x;
	int y_block = blockIdx.y;
	int z_block = blockIdx.z;

	int gr_num = z_block / in_count;
	int in_num = z_block / gr_count;

	extern __shared__ float s_deltas[];
	s_deltas[y * blockDim.x + x] = 0.0f;

	int gr_position = y * gr_rows + x;
	int filter_position = y_block * fl_size + x_block;

	if (x < gr_cols && y < gr_rows)
	{
		int matrix_position = (y + y_block) * in_cols + (x + x_block);
		float* filter_matrix_start = (float*)((char*)filters + z_block * fl_pitch);

		s_deltas[gr_position] = (tex2D(OutputsRef, gr_position, gr_num) > 0.0f)* tex2D(MatrixesRef, matrix_position, in_num)* tex2D(FiltersRef, gr_position, gr_num);
	}

	__syncthreads();

	if (y_block == 0 && x_block == 0)
		printf("%d %d: %f\n", gr_num, gr_position, s_deltas[gr_position]);
	
	for (unsigned int s = SUM_STRIDE; s > 0; s >>= 1) {
		if (gr_position < s)
			s_deltas[gr_position] += s_deltas[gr_position + s];
		__syncthreads();
	}
	if (gr_position == 0)
	{
		printf("f_num = %d, f_pos = %d : %f\n", z_block, filter_position, s_deltas[0]);
		float* filter_matrix_start = (float*)((char*)filters + z_block * fl_pitch);
		filter_matrix_start[filter_position] -= LearningRate * s_deltas[0];
	}
}

void ConvolutionalLayer::correct() {

	//test
	printf("Before correction:\n");
	float* inputs_host = new float[inputs_device.matrixes_size * inputs_device.depth];
	float* filters_host = new float[filters_device.matrixes_size * filters_device.depth];
	float* outputs_host = new float[outputs_devices.matrixes_size * outputs_devices.depth];
	float* gradients_host = new float[gradients_device.matrixes_size * gradients_device.depth];

	cudaMemcpy2D(inputs_host, inputs_device.matrixes_size * sizeof(float), inputs_device.data, inputs_device.pitch, inputs_device.matrixes_size * sizeof(float), inputs_device.depth, cudaMemcpyDeviceToHost);
	cudaMemcpy2D(filters_host, filters_device.matrixes_size * sizeof(float), filters_device.data, filters_device.pitch, filters_device.matrixes_size * sizeof(float), filters_device.depth, cudaMemcpyDeviceToHost);
	cudaMemcpy2D(outputs_host, outputs_devices.matrixes_size * sizeof(float), outputs_devices.data, outputs_devices.pitch, outputs_devices.matrixes_size * sizeof(float), outputs_devices.depth, cudaMemcpyDeviceToHost);
	cudaMemcpy2D(gradients_host, gradients_device.matrixes_size * sizeof(float), gradients_device.data, gradients_device.pitch, gradients_device.matrixes_size * sizeof(float), gradients_device.depth, cudaMemcpyDeviceToHost);

	for (int i = 0; i < inputs_device.depth; i++)
	{
		for (int j = 0; j < inputs_device.rows_count; j++)
		{
			for (int l = 0; l < inputs_device.cols_count; l++)
			{
				printf("%f ", inputs_host[i * inputs_device.matrixes_size + j * inputs_device.cols_count + l]);
			}
			printf("\n");
		}
		printf("\n");
	}

	for (int i = 0; i < filters_device.depth; i++)
	{
		for (int j = 0; j < filters_device.rows_count; j++)
		{
			for (int l = 0; l < filters_device.cols_count; l++)
			{
				printf("%f ", filters_host[i * filters_device.matrixes_size + j * filters_device.cols_count + l]);
			}
			printf("\n");
		}
		printf("\n");
	}

	for (int i = 0; i < outputs_devices.depth; i++)
	{
		for (int j = 0; j < outputs_devices.rows_count; j++)
		{
			for (int l = 0; l < outputs_devices.cols_count; l++)
			{
				printf("%f ", outputs_host[i * outputs_devices.matrixes_size + j * outputs_devices.cols_count + l]);
			}
			printf("\n");
		}
		printf("\n");
	}

	for (int i = 0; i < gradients_device.depth; i++)
	{
		for (int j = 0; j < gradients_device.rows_count; j++)
		{
			for (int l = 0; l < gradients_device.cols_count; l++)
			{
				printf("%f ", gradients_host[i * gradients_device.matrixes_size + j * gradients_device.cols_count + l]);
			}
			printf("\n");
		}
		printf("\n");
	}

	cudaBindTexture2D(0, FiltersRef, gradients_device.data, FiltersRef.channelDesc, gradients_device.matrixes_size, gradients_device.depth, gradients_device.pitch);
	cudaBindTexture2D(0, MatrixesRef, inputs_device.data, MatrixesRef.channelDesc, inputs_device.matrixes_size, inputs_device.depth, inputs_device.pitch);
	cudaBindTexture2D(0, OutputsRef, outputs_devices.data, OutputsRef.channelDesc, outputs_devices.matrixes_size, outputs_devices.depth, outputs_devices.pitch);
	
	//It can be forced for larger images. This implementation appropriate only for MNIST.
	dim3 threadsPerBlock = dim3(DOUBLE_BLOCK_SIZE, DOUBLE_BLOCK_SIZE, 1);
	dim3 blocksPerGrid = dim3(filters_device.cols_count, filters_device.rows_count, filters_device.depth);

	cuda_correct_filters << <blocksPerGrid, threadsPerBlock, MAX_ELEMENTS_COUNT * sizeof(float) >> > (filters_device.data, filters_device.cols_count, filters_device.pitch, gradients_device.cols_count, gradients_device.rows_count, gradients_device.depth, inputs_device.cols_count, inputs_device.depth);
	cudacall(cudaGetLastError())

	threadsPerBlock = BLOCK_SIZE;
	blocksPerGrid = dim3(gradients_device.depth / BLOCK_SIZE + (gradients_device.depth % BLOCK_SIZE == 0 ? 0 : 1));
	
	cuda_correct_biases << <blocksPerGrid, threadsPerBlock >> > (biases_device, gradients_device.depth, gradients_device.cols_count, gradients_device.rows_count);
	cudaDeviceSynchronize();
	cudacall(cudaGetLastError());

	cudaUnbindTexture(FiltersRef);
	cudaUnbindTexture(MatrixesRef);
	cudaUnbindTexture(OutputsRef);

	//test
	printf("After correction:\n");
	cudaMemcpy2D(filters_host, filters_device.matrixes_size * sizeof(float), filters_device.data, filters_device.pitch, filters_device.matrixes_size * sizeof(float), filters_device.depth, cudaMemcpyDeviceToHost);

	for (int i = 0; i < filters_device.depth; i++)
	{
		for (int j = 0; j < filters_device.rows_count; j++)
		{
			for (int l = 0; l < filters_device.cols_count; l++)
			{
				printf("%f ", filters_host[i * filters_device.matrixes_size + j * filters_device.cols_count + l]);
			}
			printf("\n");
		}
		printf("\n");
	}
}