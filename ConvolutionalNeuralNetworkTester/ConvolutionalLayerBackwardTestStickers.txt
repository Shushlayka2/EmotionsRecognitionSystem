void ConvolutionalLayer::backward(Tensor& prev_gradient_matrixes) {

	//test
	printf("Before bacward:\n");
	float* filters_host = new float[filters_device.matrixes_size * filters_device.depth];
	float* gradients_host = new float[gradients_device.matrixes_size * gradients_device.depth];
	float* prev_gradient_matrixes_host = new float[prev_gradient_matrixes.matrixes_size * prev_gradient_matrixes.depth];

	cudaMemcpy2D(filters_host, filters_device.matrixes_size * sizeof(float), filters_device.data, filters_device.pitch, filters_device.matrixes_size * sizeof(float), filters_device.depth, cudaMemcpyDeviceToHost);
	cudaMemcpy2D(gradients_host, gradients_device.matrixes_size * sizeof(float), gradients_device.data, gradients_device.pitch, gradients_device.matrixes_size * sizeof(float), gradients_device.depth, cudaMemcpyDeviceToHost);
	cudaMemcpy2D(prev_gradient_matrixes_host, prev_gradient_matrixes.matrixes_size * sizeof(float), prev_gradient_matrixes.data, prev_gradient_matrixes.pitch, prev_gradient_matrixes.matrixes_size * sizeof(float), prev_gradient_matrixes.depth, cudaMemcpyDeviceToHost);

	for (int i = 0; i < filters_device.depth; i++)
	{
		for (int j = 0; j < filters_device.rows_count; j++)
		{
			for (int l = 0; l < filters_device.cols_count; l++)
			{
				printf("%f ", filters_host[i * filters_device.matrixes_size + j * filters_device.cols_count + l]);
			}
			printf("\n");
		}
		printf("\n");
	}

	for (int i = 0; i < gradients_device.depth; i++)
	{
		for (int j = 0; j < gradients_device.rows_count; j++)
		{
			for (int l = 0; l < gradients_device.cols_count; l++)
			{
				printf("%f ", gradients_host[i * gradients_device.matrixes_size + j * gradients_device.cols_count + l]);
			}
			printf("\n");
		}
		printf("\n");
	}

	for (int i = 0; i < prev_gradient_matrixes.depth; i++)
	{
		for (int j = 0; j < prev_gradient_matrixes.rows_count; j++)
		{
			for (int l = 0; l < prev_gradient_matrixes.cols_count; l++)
			{
				printf("%f ", prev_gradient_matrixes_host[i * prev_gradient_matrixes.matrixes_size + j * prev_gradient_matrixes.cols_count + l]);
			}
			printf("\n");
		}
		printf("\n");
	}

	cudaBindTexture2D(0, FiltersRef, filters_device.data, FiltersRef.channelDesc, filters_device.matrixes_size, filters_device.depth, filters_device.pitch);
	cudaBindTexture2D(0, MatrixesRef, gradients_device.data, MatrixesRef.channelDesc, gradients_device.matrixes_size, gradients_device.depth, gradients_device.pitch);

	dim3 threadsPerBlock = dim3(DOUBLE_BLOCK_SIZE, DOUBLE_BLOCK_SIZE, 1);
	dim3 blocksPerGrid = dim3(prev_gradient_matrixes.cols_count / DOUBLE_BLOCK_SIZE + (prev_gradient_matrixes.cols_count % DOUBLE_BLOCK_SIZE == 0 ? 0 : 1),
		prev_gradient_matrixes.rows_count / DOUBLE_BLOCK_SIZE + (prev_gradient_matrixes.rows_count % DOUBLE_BLOCK_SIZE == 0 ? 0 : 1), prev_gradient_matrixes.depth);
	
	cuda_cross_correlation << <blocksPerGrid, threadsPerBlock >> > (prev_gradient_matrixes.data, prev_gradient_matrixes.cols_count, prev_gradient_matrixes.rows_count, prev_gradient_matrixes.pitch, gradients_device.cols_count, gradients_device.rows_count, filters_device.cols_count, gradients_device.depth, filters_device.cols_count - 1);
	cudacall(cudaGetLastError());

	//test
	printf("After backward:\n");
	cudaMemcpy2D(filters_host, filters_device.matrixes_size * sizeof(float), filters_device.data, filters_device.pitch, filters_device.matrixes_size * sizeof(float), filters_device.depth, cudaMemcpyDeviceToHost);
	cudaMemcpy2D(gradients_host, gradients_device.matrixes_size * sizeof(float), gradients_device.data, gradients_device.pitch, gradients_device.matrixes_size * sizeof(float), gradients_device.depth, cudaMemcpyDeviceToHost);
	cudaMemcpy2D(prev_gradient_matrixes_host, prev_gradient_matrixes.matrixes_size * sizeof(float), prev_gradient_matrixes.data, prev_gradient_matrixes.pitch, prev_gradient_matrixes.matrixes_size * sizeof(float), prev_gradient_matrixes.depth, cudaMemcpyDeviceToHost);

	for (int i = 0; i < filters_device.depth; i++)
	{
		for (int j = 0; j < filters_device.rows_count; j++)
		{
			for (int l = 0; l < filters_device.cols_count; l++)
			{
				printf("%f ", filters_host[i * filters_device.matrixes_size + j * filters_device.cols_count + l]);
			}
			printf("\n");
		}
		printf("\n");
	}

	for (int i = 0; i < gradients_device.depth; i++)
	{
		for (int j = 0; j < gradients_device.rows_count; j++)
		{
			for (int l = 0; l < gradients_device.cols_count; l++)
			{
				printf("%f ", gradients_host[i * gradients_device.matrixes_size + j * gradients_device.cols_count + l]);
			}
			printf("\n");
		}
		printf("\n");
	}

	for (int i = 0; i < prev_gradient_matrixes.depth; i++)
	{
		for (int j = 0; j < prev_gradient_matrixes.rows_count; j++)
		{
			for (int l = 0; l < prev_gradient_matrixes.cols_count; l++)
			{
				printf("%f ", prev_gradient_matrixes_host[i * prev_gradient_matrixes.matrixes_size + j * prev_gradient_matrixes.cols_count + l]);
			}
			printf("\n");
		}
		printf("\n");
	}

	cudaUnbindTexture(FiltersRef);
	cudaUnbindTexture(MatrixesRef);
}