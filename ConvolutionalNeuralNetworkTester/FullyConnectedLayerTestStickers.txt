float* FullyConnectedLayer::forward(float* prev_layer_data) {

	inputs_device = prev_layer_data;

	//test
	printf("Weights:\n");
	float* weights_host = new float[in_size * out_size];
	cudaMemcpy(weights_host, weights_device, in_size * out_size * sizeof(float), cudaMemcpyDeviceToHost);
	for (int i = 0; i < out_size; i++)
	{
		for (int j = 0; j < in_size; j++)
		{
			printf("%f ", weights_host[i * in_size + j]);
		}
		printf("\n");
	}
	printf("\n");
	free(weights_host);

	m_v_multiplication(weights_device, inputs_device, outputs_device, handle);

	//test
	printf("Outputs after mult:\n");
	float* outputs_host = new float[out_size];
	cudaMemcpy(outputs_host, outputs_device, out_size * sizeof(float), cudaMemcpyDeviceToHost);
	for (int i = 0; i < out_size; i++)
		printf("%f ", outputs_host[i]);
	printf("\n");

	add_biases(handle);

	//test
	printf("Outputs after biases adding:\n");
	outputs_host = new float[out_size];
	cudaMemcpy(outputs_host, outputs_device, out_size * sizeof(float), cudaMemcpyDeviceToHost);
	for (int i = 0; i < out_size; i++)
		printf("%f ", outputs_host[i]);
	printf("\n");

	activate(handle);

	//test
	printf("Outputs after activate:\n");
	outputs_host = new float[out_size];
	cudaMemcpy(outputs_host, outputs_device, out_size * sizeof(float), cudaMemcpyDeviceToHost);
	for (int i = 0; i < out_size; i++)
		printf("%f ", outputs_host[i]);
	printf("\n");
	free(outputs_host);

	return outputs_device;
}

void FullyConnectedLayer::backward(float* prev_layer_gradients) {
	
	cudaBindTexture(0, InputsRef, inputs_device, in_size * sizeof(float));
	cudaBindTexture(0, GradientsRef, gradients_device, out_size * sizeof(float));

	m_v_multiplication(weights_device, gradients_device, prev_layer_gradients, handle, CUBLAS_OP_N);

	//test
	printf("Prev Gradients before der:\n");
	float* gradients_host = new float[in_size];
	cudaMemcpy(gradients_host, prev_layer_gradients, in_size * sizeof(float), cudaMemcpyDeviceToHost);
	for (int i = 0; i < in_size; i++)
		printf("%f ", gradients_host[i]);
	printf("\n");

	dim3 threadsPerBlock = BLOCK_SIZE;
	dim3 blocksPerGrid = in_size / BLOCK_SIZE + (in_size % BLOCK_SIZE == 0 ? 0 : 1);

	cuda_gr_to_der_mult << <blocksPerGrid, threadsPerBlock >> > (prev_layer_gradients, in_size);
	cudaDeviceSynchronize();
	cudacall(cudaGetLastError());

	//test
	printf("Prev Gradients after der:\n");
	cudaMemcpy(gradients_host, prev_layer_gradients, in_size * sizeof(float), cudaMemcpyDeviceToHost);
	for (int i = 0; i < in_size; i++)
		printf("%f ", gradients_host[i]);
	printf("\n");
	free(gradients_host);

	correct();

	cudaUnbindTexture(InputsRef);
	cudaUnbindTexture(GradientsRef);
}

void FullyConnectedLayer::correct() {
	
	dim3 threadsPerBlock = dim3(DOUBLE_BLOCK_SIZE, DOUBLE_BLOCK_SIZE);
	dim3 blocksPerGrid = dim3(in_size / DOUBLE_BLOCK_SIZE + (in_size % DOUBLE_BLOCK_SIZE == 0 ? 0 : 1),
		out_size / DOUBLE_BLOCK_SIZE + (out_size % DOUBLE_BLOCK_SIZE == 0 ? 0 : 1));
	cuda_correct_weights << <blocksPerGrid, threadsPerBlock >> > (weights_device, in_size, out_size);
	cudaDeviceSynchronize();
	cudacall(cudaGetLastError());

	//test
	printf("Corrected Weights:\n");
	float* weights_host = new float[in_size * out_size];
	cudaMemcpy(weights_host, weights_device, in_size * out_size * sizeof(float), cudaMemcpyDeviceToHost);
	for (int i = 0; i < out_size; i++)
	{
		for (int j = 0; j < in_size; j++)
		{
			printf("%f ", weights_host[i * in_size + j]);
		}
		printf("\n");
	}
	printf("\n");
	free(weights_host);

	threadsPerBlock = BLOCK_SIZE;
	blocksPerGrid = out_size / BLOCK_SIZE + (out_size % BLOCK_SIZE == 0 ? 0 : 1);
	cuda_correct_biases << <blocksPerGrid, threadsPerBlock >> > (biases_device, out_size);
	cudaDeviceSynchronize();
	cudacall(cudaGetLastError());

	//test
	printf("Corrected Biases:\n");
	float* biases_host = new float[out_size];
	cudaMemcpy(biases_host, biases_device, out_size * sizeof(float), cudaMemcpyDeviceToHost);
	for (int i = 0; i < out_size; i++)
		printf("%f ", biases_host[i]);
	printf("\n");
	free(biases_host);
}

void FullyConnectedLayer::set_gradients(int correct_result) {

	cuda_set_gradients << <1, 10 >> > (gradients_device, outputs_device, correct_result);
	cudaDeviceSynchronize();
	cudacall(cudaGetLastError());

	//test
	printf("Full Connected Backward:\n");
	printf("Gradients:\n");
	float* gradients_host = new float[out_size];
	cudaMemcpy(gradients_host, gradients_device, out_size * sizeof(float), cudaMemcpyDeviceToHost);
	for (int i = 0; i < out_size; i++)
		printf("%f ", gradients_host[i]);
	printf("\n");
	free(gradients_host);
}